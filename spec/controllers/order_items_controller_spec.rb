require 'rails_helper'
require 'pp'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OrderItemsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # OrderItem. As you add validations to OrderItem, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
		{
			:product_id => 1,
			:order_id => 1,
			:quantity => 1,
		}
  }

  let(:invalid_attributes) {
		{
			:product_id => "wrong",
			:order_id => "wrong",
			:quantity => "wrong",
		}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrderItemsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET edit" do
    it "assigns the requested order_item as @order_item" do
      order_item = OrderItem.create! valid_attributes
      get :edit, {:id => order_item.to_param}, valid_session
      expect(assigns(:order_item)).to eq(order_item)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new OrderItem" do
        expect {
					post :create, {:product_id => 1}, valid_session
        }.to change(OrderItem, :count).by(1)
      end

      it "assigns a newly created order_item as @order_item" do
				post :create, {:product_id => 1}, valid_session
        expect(assigns(:order_item)).to be_a(OrderItem)
        expect(assigns(:order_item)).to be_persisted
      end

      it "redirects to the created order_item" do
				post :create, {:product_id => 1}, valid_session
        expect(response).to redirect_to(Order.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved order_item as @order_item" do
        post :create, {:order_item => invalid_attributes}, valid_session
        expect(assigns(:order_item)).to be_a_new(OrderItem)
      end

      it "re-renders the 'new' template" do
        post :create, {:order_item => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
				{
					:product_id => 2,
					:order_id => 2,
					:quantity => 4,
				}
			}

      it "updates the requested order_item" do
        order_item = OrderItem.create! valid_attributes
        put :update, {:id => order_item.to_param, :order_item => new_attributes}, valid_session
        order_item.reload
				expect(order_item.quantity).to eq(4)
      end

      it "assigns the requested order_item as @order_item" do
        order_item = OrderItem.create! valid_attributes
        put :update, {:id => order_item.to_param, :order_item => valid_attributes}, valid_session
        expect(assigns(:order_item)).to eq(order_item)
      end

      it "redirects to the order_item" do
        order_item = OrderItem.create! valid_attributes
        put :update, {:id => order_item.to_param, :order_item => valid_attributes}, valid_session
        expect(response).to redirect_to(order_item)
      end
    end

    describe "with invalid params" do
      it "assigns the order_item as @order_item" do
        order_item = OrderItem.create! valid_attributes
        put :update, {:id => order_item.to_param, :order_item => invalid_attributes}, valid_session
        expect(assigns(:order_item)).to eq(order_item)
      end

      it "re-renders the 'edit' template" do
        order_item = OrderItem.create! valid_attributes
        put :update, {:id => order_item.to_param, :order_item => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested order_item" do
		  order = FactoryGirl.create(:order_with_order_items, order_items_count: 3)
      order_item = order.order_items.first
			session[:order_id] = 1
      expect {
        delete :destroy, {:id => order_item.to_param}, valid_session
      }.to change(OrderItem, :count).by(-1)
    end

    it "redirects to the order_items list" do
		  order = FactoryGirl.create(:order_with_order_items, order_items_count: 3)
      order_item = order.order_items.first
			session[:order_id] = 1
      delete :destroy, {:id => order_item.to_param}, valid_session
      expect(response).to redirect_to(order_url)
    end
  end

end
